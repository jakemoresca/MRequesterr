@page "/"
@using MRequesterr.DTOs
@using MRequesterr.Helpers
@using MRequesterr.Models
@using MRequesterr.Services
@using MRequesterr.Shared.Card;

@inject IRadarrService _radarrService
@inject ISettingsService _settingsService;

<PageTitle>Now Playing</PageTitle>

<nav class="navbar navbar-dark bg-dark ml-n1">
    <div class="container-fluid justify-content-start">
        <div class="col-md-9">
            <button type="button" class="btn btn-outline-primary" (click)="scanMovies()">Scan All</button>
        </div>

        <div class="col-md-1">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary dropdown-toggle" data-bs-toggle="dropdown"
                        aria-expanded="false">
                    View
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <a class="dropdown-item" (click)="changeViewType('Table')"
                           [ngClass]="viewType == 'Table' ? 'active' : ''">Table</a>
                    </li>
                    <li>
                        <a class="dropdown-item" (click)="changeViewType('Poster')"
                           [ngClass]="viewType == 'Poster' ? 'active' : ''">Poster</a>
                    </li>
                </ul>
            </div>
        </div>

        <div class="col-md-1">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary dropdown-toggle" data-bs-toggle="dropdown"
                        aria-expanded="false">
                    Filter
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <a class="dropdown-item" (click)="changeFilterType('All')"
                           [ngClass]="filterType == 'All' ? 'active' : ''">All</a>
                    </li>
                    <li>
                        <a class="dropdown-item" (click)="changeFilterType('Existing')"
                           [ngClass]="filterType == 'Existing' ? 'active' : ''">Existing</a>
                    </li>
                    <li>
                        <a class="dropdown-item" (click)="changeFilterType('NotExisting')"
                           [ngClass]="filterType == 'NotExisting' ? 'active' : ''">Not Existing</a>
                    </li>
                    <li>
                        <a class="dropdown-item" (click)="changeFilterType('ExistOnOtherCountry')"
                           [ngClass]="filterType == 'ExistOnOtherCountry' ? 'active' : ''">Exist on other Country</a>
                    </li>
                    <li>
                        <hr class="dropdown-divider">
                    </li>
                    <li>
                        <a class="dropdown-item" (click)="changeFilterType('Unmonitored')"
                           [ngClass]="filterType == 'Unmonitored' ? 'active' : ''">Unmonitored</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</nav>


<div class="album py-5 bg-light">
    <div class="container">

        @if (viewType == "Poster")
        {
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3" >
                <InfiniteScrolling ItemsProvider="GetItems">
                    <ItemTemplate Context="movie">
                        @{
                            var url = imageBaseUrl + movie.Images.FirstOrDefault()?.Url.Replace("/radarr", "") + "&apikey=b6054f51015b496aa5e244246ae35d60";
                        }
                        <Card @key="movie.Id" Title="@movie.Title" ImageUrl="@url" Overview="@movie.Overview" ReleasedStatus="@movie.Status" />
                    </ItemTemplate>
                    <LoadingTemplate>
                        <div>Loading...</div>
                    </LoadingTemplate>
                </InfiniteScrolling>
            </div>
        }
        else if (viewType == "Table")
        {
            <div class="row">
                <app-movie-table [movies]="movies" [countryFilter]="countryFilter" [filterType]="filterType"
                             (scanMovie)="scanMovie($event)" [matchedMovies]="matchedMovies"></app-movie-table>
            </div>
        }
    </div>
</div>

@code {
    List<MovieDto> movies = new List<MovieDto>();
    string viewType = "Poster";
    IntegrationOptions integrationOptions;
    string imageBaseUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        integrationOptions = _settingsService.GetSettings();

        var movieSettings = integrationOptions.MovieSettings;

        var port = movieSettings.Port;
        var host = movieSettings.Host;
        var useSsl = movieSettings.UseSsl;
        var baseUrl = movieSettings.BaseUrl;
        var protocol = useSsl ? "https://" : "http://";

        imageBaseUrl = $"{protocol}{host}:{port}/radarr/api/v3/";

        movies = await _radarrService.GetMovies();
    }

    private async Task<IEnumerable<MovieDto>> GetItems(InfiniteScrollingItemsProviderRequest request)
    {
        await Task.Delay(1000); // Simulate async loading

        var virtualMovies = movies.OrderBy(x => x.Id).Skip(request.StartIndex).Take(10).ToList();

        return virtualMovies;
    }

    private async ValueTask<ItemsProviderResult<MovieDto>> LoadMovies(ItemsProviderRequest request)
    {
        var numMovies = Math.Min(request.Count, movies.Count - request.StartIndex);
        var virtualMovies = movies.OrderBy(x => x.Id).Skip(request.StartIndex).Take(numMovies).ToList();
        //await EmployeesService.GetEmployeesAsync(request.StartIndex,
        //    numEmployees, request.CancellationToken);

        return new ItemsProviderResult<MovieDto>(virtualMovies, movies.Count);
    }
}