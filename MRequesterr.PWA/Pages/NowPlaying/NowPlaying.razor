@page "/"

@using MRequesterr.DTOs
@using MRequesterr.Helpers
@using MRequesterr.Models
@using MRequesterr.Services
@using MRequesterr.PWA.Shared.Card;
@using MRequesterr.PWA.Shared.Carousel;

@inject IRadarrService _radarrService
@inject ISettingsService _settingsService;

<PageTitle>Now Playing</PageTitle>


<div class="album py-5 bg-light">
    <div class="container">

        @if (viewType == "Poster")
        {
            /*
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
                <Virtualize Items="@movies" Context="movie" ItemSize="290" OverscanCount="50">
                    @{
                        var url = imageBaseUrl + movie.Images.FirstOrDefault()?.Url.Replace("/radarr", "") + "&apikey=b6054f51015b496aa5e244246ae35d60";
                    }
                    <Card @key="movie.Id" Title="@movie.Title" ImageUrl="@url" Overview="@movie.Overview" ReleasedStatus="@movie.Status" />
                </Virtualize>
            </div>*/
            <h2>Now Available</h2>
            <Carousel Movies="movies" ImageBaseUrl="@imageBaseUrl" />
        }
        else if (viewType == "Table")
        {
            <div class="row">
                <app-movie-table [movies]="movies" [countryFilter]="countryFilter" [filterType]="filterType"
                             (scanMovie)="scanMovie($event)" [matchedMovies]="matchedMovies"></app-movie-table>
            </div>
        }
    </div>
</div>

@code {
    List<MovieDto> movies = new List<MovieDto>();
    string viewType = "Poster";
    IntegrationOptions integrationOptions;
    string imageBaseUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        integrationOptions = _settingsService.GetSettings();

        var movieSettings = integrationOptions.MovieSettings;

        var port = movieSettings.Port;
        var host = movieSettings.Host;
        var useSsl = movieSettings.UseSsl;
        var baseUrl = movieSettings.BaseUrl;
        var protocol = useSsl ? "https://" : "http://";

        imageBaseUrl = $"{protocol}{host}:{port}/radarr/api/v3/";

        movies = await _radarrService.GetMovies();
    }

    private async Task<IEnumerable<MovieDto>> GetItems(InfiniteScrollingItemsProviderRequest request)
    {
        await Task.Delay(1000); // Simulate async loading

        var virtualMovies = movies.OrderBy(x => x.Id).Skip(request.StartIndex).Take(10).ToList();

        return virtualMovies;
    }

    private async ValueTask<ItemsProviderResult<MovieDto>> LoadMovies(ItemsProviderRequest request)
    {
        var numMovies = Math.Min(request.Count, movies.Count - request.StartIndex);
        var virtualMovies = movies.OrderBy(x => x.Id).Skip(request.StartIndex).Take(numMovies).ToList();
        //await EmployeesService.GetEmployeesAsync(request.StartIndex,
        //    numEmployees, request.CancellationToken);

        return new ItemsProviderResult<MovieDto>(virtualMovies, movies.Count);
    }
}